<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

  <modelVersion>4.0.0</modelVersion>

  <groupId>io.mfj</groupId>
  <artifactId>textricator-web</artifactId>
  <version>${version}</version>
  <packaging>jar</packaging>

  <properties>
    <version>9.0-SNAPSHOT</version>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <kotlin.version>1.2.0</kotlin.version>
    <junit.version>4.12</junit.version>
    <docker.tag>mfj/textricator-web</docker.tag>

    <!-- If you change textricator version, make sure to update the itext versions if necessary. -->
    <version.textricator>9.0.35</version.textricator>
    <version.itext5>5.5.12</version.itext5>
    <version.itext7>7.1.0</version.itext7>
  </properties>

  <dependencies>

    <dependency>
      <groupId>org.jetbrains.kotlin</groupId>
      <artifactId>kotlin-stdlib-jre8</artifactId>
      <version>${kotlin.version}</version>
      <!-- Apache 2.0 -->
    </dependency>
    <dependency>
      <groupId>org.jetbrains.kotlin</groupId>
      <artifactId>kotlin-test-junit</artifactId>
      <version>${kotlin.version}</version>
      <scope>test</scope>
      <!-- Apache 2.0 -->
    </dependency>
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-api</artifactId>
      <version>1.7.25</version>
      <!-- MIT -->
    </dependency>
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-simple</artifactId>
      <version>1.7.25</version>
      <!-- MIT -->
    </dependency>
    <dependency>
      <groupId>io.mfj</groupId>
      <artifactId>textricator</artifactId>
      <version>${version.textricator}</version>
      <!-- AGPLv3 -->
    </dependency>
    <dependency>
      <groupId>com.sparkjava</groupId>
      <artifactId>spark-core</artifactId>
      <version>2.6.0</version>
      <!-- Apache 2.0 -->
    </dependency>
    <dependency>
      <groupId>com.google.code.gson</groupId>
      <artifactId>gson</artifactId>
      <version>2.8.0</version>
      <!-- Apache 2.0 -->
    </dependency>

    <!--
    AGPL requires we make the iText source code available.
    We do that by pulling the source jars and putting them in the docker image.
    (Deployment via the docker image satisfies the requirements.
    If you deploy via other means, make sure to provide access to itext source.)
    -->

    <!-- iText 5 -->
    <dependency>
      <groupId>com.itextpdf</groupId>
      <artifactId>itextpdf</artifactId>
      <version>${version.itext5}</version>
      <classifier>sources</classifier>
      <!-- AGPL -->
    </dependency>

    <!-- iText 7 -->
    <dependency>
      <groupId>com.itextpdf</groupId>
      <artifactId>kernel</artifactId>
      <version>${version.itext7}</version>
      <classifier>sources</classifier>
      <!-- AGPL -->
    </dependency>
    <dependency>
      <groupId>com.itextpdf</groupId>
      <artifactId>layout</artifactId>
      <!-- If you change this, update src/main/resources/static/index.html -->
      <version>${version.itext7}</version>
      <classifier>sources</classifier>
      <!-- AGPL -->
    </dependency>
  </dependencies>

  <build>

    <!-- inject versions into version.properties. -->
    <!-- Is there a better way to do this (besides switching to gradle, obviously)? -->
    <resources>
      <resource>
        <directory>src/main/resources</directory>
        <filtering>true</filtering>
        <includes>
          <include>**/index.html</include>
        </includes>
      </resource>
      <resource>
        <directory>src/main/resources</directory>
        <filtering>false</filtering>
        <excludes>
          <exclude>**/index.html</exclude>
        </excludes>
      </resource>
    </resources>

    <plugins>
      <plugin>
        <groupId>org.jetbrains.kotlin</groupId>
        <artifactId>kotlin-maven-plugin</artifactId>
        <version>${kotlin.version}</version>
        <executions>
          <execution>
            <id>compile</id>
            <phase>compile</phase>
            <goals>
              <goal>compile</goal>
            </goals>
          </execution>
          <execution>
            <id>test-compile</id>
            <phase>test-compile</phase>
            <goals>
              <goal>test-compile</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <configuration>
          <source>1.8</source>
          <target>1.8</target>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-source-plugin</artifactId>
        <executions>
          <execution>
            <id>attach-sources</id>
            <goals>
              <goal>jar</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-enforcer-plugin</artifactId>
        <version>1.4.1</version>
        <executions>
          <execution>
            <id>enforce-no-snapshots</id>
            <goals>
              <goal>enforce</goal>
            </goals>
            <configuration>
              <rules>
                <requireReleaseDeps>
                  <message>Cannot have snapshot dependencies of a release!</message>
                  <onlyWhenRelease>true</onlyWhenRelease>
                  <searchTransitive>true</searchTransitive>
                  <failWhenParentIsSnapshot>true</failWhenParentIsSnapshot>
                </requireReleaseDeps>
              </rules>
              <fail>true</fail>
            </configuration>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>

  <profiles>
    <profile>
      <id>docker</id>
      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-dependency-plugin</artifactId>
            <version>2.10</version>
            <executions>
              <execution>
                <id>docker-prep-lib</id>
                <phase>package</phase>
                <goals>
                  <goal>copy</goal>
                </goals>
                <configuration>
                  <artifactItems>
                    <artifactItem>
                      <groupId>${project.groupId}</groupId>
                      <artifactId>${project.artifactId}</artifactId>
                      <version>${project.version}</version>
                    </artifactItem>
                  </artifactItems>
                  <outputDirectory>${project.build.directory}/docker/lib/</outputDirectory>
                </configuration>
              </execution>
              <execution>
                <id>docker-prep-deps</id>
                <phase>prepare-package</phase>
                <goals>
                  <goal>copy-dependencies</goal>
                </goals>
                <configuration>
                  <outputDirectory>${project.build.directory}/docker/jar/</outputDirectory>
                </configuration>
              </execution>
            </executions>
          </plugin>
          <!-- build the docker image in the package phase and push in the deploy phase. -->
          <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>exec-maven-plugin</artifactId>
            <version>1.4.0</version>
            <executions>
              <execution>
                <id>docker-build</id>
                <phase>package</phase>
                <goals>
                  <goal>exec</goal>
                </goals>
                <configuration>
                  <executable>docker</executable>
                  <commandlineArgs>build -t ${docker.tag}:${project.version} .</commandlineArgs>
                </configuration>
              </execution>
              <execution>
                <id>docker-push-tag</id>
                <phase>deploy</phase>
                <goals>
                  <goal>exec</goal>
                </goals>
                <configuration>
                  <executable>docker</executable>
                  <commandlineArgs>tag ${docker.tag}:${project.version} ${deploymentDockerRegistry}/${docker.tag}:${project.version}</commandlineArgs>
                </configuration>
              </execution>
              <execution>
                <id>docker-push</id>
                <phase>deploy</phase>
                <goals>
                  <goal>exec</goal>
                </goals>
                <configuration>
                  <executable>docker</executable>
                  <commandlineArgs>push ${deploymentDockerRegistry}/${docker.tag}:${project.version}</commandlineArgs>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>

</project>
